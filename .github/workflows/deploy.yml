name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/databases-performance-test
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=sha
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@master
      with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
              # Ensure Docker is installed
              if ! command -v docker &> /dev/null; then
                  echo "Docker is not installed. Installing..."
                  sudo apt-get update
                  sudo apt-get install -y docker.io
                  sudo systemctl start docker
                  sudo systemctl enable docker
              fi
      
              # Add the user to the docker group to allow running docker commands without sudo
              sudo usermod -aG docker $USER
      
              # Inform user to log out and log back in to apply group changes
              echo "User $USER added to the docker group. Please log out and log back in for this to take effect."
      
              # Create .env file with all necessary environment variables
              sudo cat > /home/${{ env.EC2_USER }}/app.env << EOL
              POSTGRES_URL=${{ secrets.POSTGRES_URL }}
              MONGODB_URL=${{ secrets.MONGODB_URL }}
              SURREALDB_URL=${{ secrets.SURREALDB_URL }}
              RUST_LOG=info
              DATABASE_TYPE=postgres  # Optional: if you want to specify default database
              EOL
      
              # Ensure proper permissions
              chmod 600 /home/${{ env.EC2_USER }}/app.env
      
              # Always pull the latest Docker image
              sudo docker pull ${{ env.IMAGE_NAME }}:latest
      
              # Stop and remove existing container
              sudo docker stop databases-performance-test || true
              sudo docker rm databases-performance-test || true
      
              # Run new container with environment file
              sudo docker run -d \
                --name databases-performance-test \
                --restart always \
                -p 3000:3000 \
                --env-file /home/${{ env.EC2_USER }}/app.env \
                ${{ env.IMAGE_NAME }}:latest
      
              # Wait for the container to start
              sleep 10  # Adjust as needed for your application
      
              # Check if the container is running
              if [ "$(docker ps -q -f name=databases-performance-test)" ]; then
                  echo "Container is running."
              else
                  echo "Failed to start the container."
                  exit 1
              fi
      
              sudo rm /home/${{ env.EC2_USER }}/app.env
              
              sudo docker image prune -f
      